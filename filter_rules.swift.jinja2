// This file was autogenerated by `generate_filterrules.py` from
// {{ url }}
// at {{ date }}
// DO NOT MODIFY BY HAND

import Foundation


enum FilterRuleType : Int, Equatable, CaseIterable {

  enum DataType {
      {%- for dataType in rule_types|map(attribute='datatype')|unique|sort %}
      case {{ dataType|to_camel }}
      {%- endfor %}
  }

{%- for rule in rule_types %}
  case {{ rule.swift_name }} = {{ rule.id }}
{%- endfor %}

 func filterVar() -> String {
    switch self {
      {%- for rule in rule_types %}
      case .{{ rule.swift_name }}:
        return "{{ rule.filtervar }}"
      {%- endfor %}
    }
  }

 func dataType() -> DataType {
    switch self {
      {%- for rule in rule_types %}
      case .{{ rule.swift_name }}:
        return .{{ rule.datatype|to_camel }}
      {%- endfor %}
    }
  }

 func defaultValue() -> Bool {
    switch self {
      {%- for rule in rule_types | selectattr("default") %}
      case .{{ rule.swift_name }}:
        return true
      {%- endfor %}

      default:
        return false
    }
  }

 func multiple() -> Bool {
    switch self {
      {%- for rule in rule_types | selectattr("multi") %}
      case .{{ rule.swift_name }}:
        return true
      {%- endfor %}

      default:
        return false
    }
  }

  static func allMultiples() -> Set<FilterRuleType> {
    return [
      {%- for rule in rule_types | selectattr("multi") %}
      .{{ rule.swift_name }},
      {%- endfor %}
    ]
  }

 func isNullFilterVar() -> String? {
    switch self {
      {%- for rule in rule_types | selectattr("isnull_filtervar") %}
      case .{{ rule.swift_name }}:
        return "{{ rule.isnull_filtervar }}"
      {%- endfor %}

      default:
        return nil
    }
  }
}
