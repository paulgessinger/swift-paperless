# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    xcodes(
      select_for_current_build_only: true
    )

    setup_ci if is_ci

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_filepath: ENV["APP_STORE_CONNECT_KEY_FILEPATH"],
      key_content: ENV["APP_STORE_CONNECT_KEY_CONTENT"],
      in_house: false,
    )

    match(
      type: "appstore",
      app_identifier: [
        "com.paulgessinger.swift-paperless",
        "com.paulgessinger.swift-paperless.ShareExtension"
      ],
      readonly: is_ci
    )

    ensure_git_branch(branch: "^beta|develop\/.+$")
    ensure_git_status_clean
    git_pull(rebase: true)

    previous_build_number = latest_testflight_build_number()
    current_build_number = previous_build_number + 1

    last_tag = last_git_tag()

    changelog = sh("git cliff --config fastlane/cliff.toml -w .. --unreleased 2> /dev/null")

    header = File.read("../changelog_header.md")
    changelog = changelog.gsub("<<<HEADER>>>", header)

    increment_build_number(
      xcodeproj: "swift-paperless.xcodeproj",
      build_number: current_build_number
    )

    version = get_version_number(
      xcodeproj: "swift-paperless.xcodeproj",
      target: "swift-paperless"
    )

    build_app(
      scheme: "swift-paperless",
      xcargs: "-skipPackagePluginValidation -skipMacroValidation" # seemingly no alternative on CI
    )

    git_commit(
      path: "swift-paperless.xcodeproj",
      message: "Bump build number to #{current_build_number}"
    )
    push_to_git_remote()

    github_release = set_github_release(
      repository_name: "paulgessinger/swift-paperless",
      api_bearer: ENV["GITHUB_TOKEN"],
      name: "v#{version} (#{current_build_number})",
      tag_name: "builds/#{version}/#{current_build_number}",
      description: changelog,
      commitish: "beta",
      is_prerelease: true
    )

    upload_to_testflight(
      changelog: changelog,
      skip_waiting_for_build_processing: ENV["CI"]
    )

  end

  lane :bump_build do
    previous_build_number = latest_testflight_build_number()
    current_build_number = previous_build_number + 1

    increment_build_number(
      xcodeproj: "swift-paperless.xcodeproj",
      build_number: current_build_number
    )
  end

  lane :tests do
    xcodes(
      select_for_current_build_only: true
    )

    run_tests(
      scheme: "swift-paperlessTests",
      xcargs: "-skipPackagePluginValidation -skipMacroValidation",
      output_types: ""
    )

    spm(
      command: "test",
      package_path: "Common",
    )

    spm(
      command: "test",
      package_path: "DataModel",
    )
  end

  lane :build do |options|
    xcodes(
      select_for_current_build_only: true
    )

    device = options.fetch(:device, "iPhone 16 Pro")
    ios = options.fetch(:ios, "18.2")


    build_app(
      scheme: "swift-paperless",
      destination: "platform=iOS Simulator,OS=#{ios},name=#{device}",
      xcargs: "-skipPackagePluginValidation -skipMacroValidation",
    )
  end

  lane :screenshots do
    xcodes(
      select_for_current_build_only: true
    )

    snapshot()
  end
end
